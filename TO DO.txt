Commencer a afficher des choses a l'ecran ?

OLD RAYCASTING
void	clearcast(t_game *game)
{
	double player_x = game->ray.x;
	double player_y = game->ray.y;
	double	vector_y;
	double	vector_x;
	double	temp_x;
	double	intersection_y;
	double	intersection_x;
	double	c_y;
	double	c_x;
	double angle = game->ray.angle;
	// on reset l'angle pour faire proprement un tour sur soi meme tu connais bref
	if (angle > 0 && angle < M_PI)
	{
		//intersection y quand le rayon touche une ligne horizontale de la carte
		intersection_y = floor(player_y / SQUARE_SIZE) * SQUARE_SIZE + SQUARE_SIZE;
		//vector y c'est la distance en Y que notre rayon va parcourir à chaque itération depuis l'intersection y
		vector_y = SQUARE_SIZE;
		//angle = game->ray.angle -= M_PI * 2;
		// ici on regarde vers le bas -> on avance vers les Y positifs
	}
	else
	{
		// à l'inverse ici on va vers le haut du coup on va vers les Y négatifs
		intersection_y = floor(player_y / SQUARE_SIZE) * SQUARE_SIZE - 1;
		vector_y = -SQUARE_SIZE;
	}
	vector_x = SQUARE_SIZE / tan(angle);
	temp_x = tan(angle) * intersection_y - player_y;
	intersection_x = player_x + (player_y - intersection_y) / tan(angle);
	c_x = intersection_x + vector_x;
	c_y = intersection_y + vector_y;
	int x = (int)c_x / SQUARE_SIZE;
	int y = (int)c_y / SQUARE_SIZE;
	while (1)
	{
		if (x >= game->x || y >= game->y || x < 0 || y < 0)
			break ;
		if (game->map[y][x] != '0')
			break ;
		c_x += vector_x;
		c_y += vector_y;
		x = (int)c_x / SQUARE_SIZE;
		y = (int)c_y / SQUARE_SIZE;
	}
	printf("angle %f,intersection y %f,intersection x %f\n", angle, c_y, c_x);
	//game->ray.touch_y = c_y;
	//game->ray.touch_x = c_x;
	clearline(game, game->ray.x, game->ray.y, c_x, c_y);
	//draw_wall(game, intersection_x, intersection_y, angle);
}

void	raycast(t_game *game)
{
	double player_x = game->ray.x;
	double player_y = game->ray.y;
	double	vector_y;
	double	vector_x;
	double	temp_x;
	double	intersection_y;
	double	intersection_x;
	double	c_y;
	double	c_x;
	double angle = game->ray.angle;
	// on reset l'angle pour faire proprement un tour sur soi meme tu connais bref
	if (angle > 0 && angle < M_PI)
	{
		//intersection y quand le rayon touche une ligne horizontale de la carte
		intersection_y = floor(player_y / SQUARE_SIZE) * SQUARE_SIZE + SQUARE_SIZE;
		//vector y c'est la distance en Y que notre rayon va parcourir à chaque itération depuis l'intersection y
		vector_y = SQUARE_SIZE;
		//ici on regarde vers le bas -> on avance vers les Y positifs
	}
	else
	{
		printf("coucou\n");
		// à l'inverse ici on va vers le haut du coup on va vers les Y négatifs
		intersection_y = floor(player_y / SQUARE_SIZE) * SQUARE_SIZE - 1;
		vector_y = -SQUARE_SIZE;
	}
	vector_x = SQUARE_SIZE / tan(angle);
	temp_x = tan(angle) * intersection_y - player_y;
	intersection_x = player_x + (player_y - intersection_y) / tan(angle);
	c_x = intersection_x + vector_x;
	c_y = intersection_y + vector_y;
	int x = (int)c_x / SQUARE_SIZE;
	int y = (int)c_y / SQUARE_SIZE;
	while (1)
	{
		if (x >= game->x || y >= game->y || x < 0 || y < 0)
			break ;
		if (game->map[y][x] != '0')
			break ;
		c_x += vector_x;
		c_y += vector_y;
		x = (int)c_x / SQUARE_SIZE;
		y = (int)c_y / SQUARE_SIZE;
	}
	printf("angle %f,intersection y %f,intersection x %f\n", angle, c_y, c_x);
	game->ray.touch_y = c_y;
	game->ray.touch_x = c_x;
	drawline(game, game->ray.x, game->ray.y, c_x, c_y);
	//draw_wall(game, intersection_x, intersection_y, angle);
}
